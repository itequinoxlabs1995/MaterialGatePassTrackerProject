@{
    ViewData["Title"] = "Sidebar";
}


<!-- Boxicons -->
<link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
<link href='https://unpkg.com/boxicons@2.1.4/dist/boxicons.js' rel='stylesheet'>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<link url="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
<!-- My CSS -->
<link rel="stylesheet" href="style.css">
<style>
    #coursesDoughnutChart, #coursesDoughnutChart1, #coursesDoughnutChart2 {
        height: 280px !important;
        width: 280px !important;
        margin-top: 14px;
    }

    .footer[b-ghlted96la] {
        margin-left: 282px !important;
        margin-bottom: -372px !important;
    }
</style>

<link href='https://fonts.googleapis.com/css?family=Roboto:400,100,300,700' rel='stylesheet' type='text/css'>

<style>
    .chartheight {
        Width: 650px !important;
    }

    .form2 {
        padding: 14px 22px;
    }


    body, html {
        /* background: #181E24;*/
        padding-top: 10px;
    }

    .wrapper {
        width: 60%;
        display: block;
        overflow: hidden;
        /*margin: 0 auto;*/
        margin: 0px -52px;
        /*padding: 60px 50px;*/
        padding: 19px 50px;
        background: #fff;
        border-radius: 4px;
        height: 380px !important;
    }

    canvas {
        background: #fff;
        height: 400px;
    }

    h1 {
        font-family: Roboto;
        color: #fff;
        margin-top: 50px;
        font-weight: 200;
        text-align: center;
        display: block;
        text-decoration: none;
    }
</style>

<!-- SIDEBAR -->
<section id="sidebar">
    <a href="#" class="brand">
        <i class='bx bxs-smile  bx-lg'></i>
        <span class="text">Admin</span>
    </a>
    <div class="btn">
        <span class="fas fa-bars"></span>
    </div>
    <nav class="sidebar">

        <ul>
            <li class="active"><a href="Dashboard">Dashboard</a></li>
            <li>
                <a href="#" class="feat-btn">
                    User management
                    <span class="fas fa-caret-down first"></span>
                </a>
                <ul class="feat-show">
                  <!--  <li><a onclick="document.getElementById('id01').style.display='block'">Add User</a></li>-->
                   <!-- <li><a href="EditUser">Edit User</a></li>
                    <li><a href="DeleteUser">Delete User</a></li>-->
                    <li><a href="AllUsers">All User</a></li>
                    <li><a href="AllRoles">User Role</a></li>
                </ul>
            </li>
            <li>
                <a href="#" class="serv-btn">
                    Project management
                    <span class="fas fa-caret-down second"></span>
                </a>
                <ul class="serv-show">
                    <li><a href="AllProjects">All Project</a></li>
                </ul>
            </li>
            <li><a href="Report">Report</a></li>
            <li><a href="Logout">Logout</a></li>
            <!--- <li><a href="#">Overview</a></li>
             <li><a href="#">Shortcuts</a></li>
             <li><a href="#">Feedback</a></li>-->
        </ul>
    </nav>

    <!---  <ul class="side-menu top">
          <li class="active">
              <a href="#">
                  <i class='bx bxs-dashboard bx-sm'></i>
                  <span class="text">Dashboard</span>
              </a>
          </li>

          <li>
              <a href="#">
                  <i class='bx bxs-message-dots bx-sm'></i>
                  <span class="text">Report</span>
              </a>
          </li>
          <li>
              <a href="#">
                  <i class='bx bxs-group bx-sm'></i>
                  <span class="text">User management</span>
              </a>
          </li>
          <li>
              <a href="#">
                  <i class='bx bxs-group bx-sm'></i>
                  <span class="text">Project management</span>
              </a>
          </li>
      </ul>-->
   <!-- <ul class="side-menu bottom">
        <li>
            <a href="#">
                <i class='bx bxs-cog bx-sm bx-spin-hover'></i>
                <span class="text">Settings</span>
            </a>
        </li>
        <li>
            <a href="#" class="logout">
                <i class='bx bx-power-off bx-sm bx-burst-hover'></i>
                <span class="text">Logout</span>
            </a>
        </li>
    </ul>-->
</section>

<!-- CONTENT -->
<script src='https://kit.fontawesome.com/a076d05399.js' crossorigin='anonymous'></script>

<script>
    const allSideMenu = document.querySelectorAll('#sidebar .side-menu.top li a');

    allSideMenu.forEach(item => {
        const li = item.parentElement;

        item.addEventListener('click', function () {
            allSideMenu.forEach(i => {
                i.parentElement.classList.remove('active');
            })
            li.classList.add('active');
        })
    });

    // TOGGLE SIDEBAR
    const menuBar = document.querySelector('#content nav .bx.bx-menu');
    const sidebar = document.getElementById('sidebar');

    // Sidebar toggle işlemi
    menuBar.addEventListener('click', function () {
        sidebar.classList.toggle('hide');
    });

    // Sayfa yüklendiğinde ve boyut değişimlerinde sidebar durumunu ayarlama
    function adjustSidebar() {
        if (window.innerWidth <= 576) {
            sidebar.classList.add('hide');  // 576px ve altı için sidebar gizli
            sidebar.classList.remove('show');
        } else {
            sidebar.classList.remove('hide');  // 576px'den büyükse sidebar görünür
            sidebar.classList.add('show');
        }
    }

    // Sayfa yüklendiğinde ve pencere boyutu değiştiğinde sidebar durumunu ayarlama
    window.addEventListener('load', adjustSidebar);
    window.addEventListener('resize', adjustSidebar);

    // Arama butonunu toggle etme
    const searchButton = document.querySelector('#content nav form .form-input button');
    const searchButtonIcon = document.querySelector('#content nav form .form-input button .bx');
    const searchForm = document.querySelector('#content nav form');

    searchButton.addEventListener('click', function (e) {
        if (window.innerWidth < 768) {
            e.preventDefault();
            searchForm.classList.toggle('show');
            if (searchForm.classList.contains('show')) {
                searchButtonIcon.classList.replace('bx-search', 'bx-x');
            } else {
                searchButtonIcon.classList.replace('bx-x', 'bx-search');
            }
        }
    })

    // Dark Mode Switch
    const switchMode = document.getElementById('switch-mode');

    switchMode.addEventListener('change', function () {
        if (this.checked) {
            document.body.classList.add('dark');
        } else {
            document.body.classList.remove('dark');
        }
    })

    // Notification Menu Toggle
    document.querySelector('.notification').addEventListener('click', function () {
        document.querySelector('.notification-menu').classList.toggle('show');
        document.querySelector('.profile-menu').classList.remove('show'); // Close profile menu if open
    });

    // Profile Menu Toggle
    document.querySelector('.profile').addEventListener('click', function () {
        document.querySelector('.profile-menu').classList.toggle('show');
        document.querySelector('.notification-menu').classList.remove('show'); // Close notification menu if open
    });

    // Close menus if clicked outside
    window.addEventListener('click', function (e) {
        if (!e.target.closest('.notification') && !e.target.closest('.profile')) {
            document.querySelector('.notification-menu').classList.remove('show');
            document.querySelector('.profile-menu').classList.remove('show');
        }
    });

    // Menülerin açılıp kapanması için fonksiyon
    function toggleMenu(menuId) {
        var menu = document.getElementById(menuId);
        var allMenus = document.querySelectorAll('.menu');

        // Diğer tüm menüleri kapat
        allMenus.forEach(function (m) {
            if (m !== menu) {
                m.style.display = 'none';
            }
        });

        // Tıklanan menü varsa aç, yoksa kapat
        if (menu.style.display === 'none' || menu.style.display === '') {
            menu.style.display = 'block';
        } else {
            menu.style.display = 'none';
        }
    }

    // Başlangıçta tüm menüleri kapalı tut
    document.addEventListener("DOMContentLoaded", function () {
        var allMenus = document.querySelectorAll('.menu');
        allMenus.forEach(function (menu) {
            menu.style.display = 'none';
        });
    });
</script>


<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<script src="https://www.google.com/jsapi"></script>
<script>
    /**
     * Selector for chart element.
     */
    var chartSelector = '#chart';

    /**
     * Selector used to get label elements inside the rendered chart.
     * Your mileage may vary if you configure your chart different than
     * me. Use Firebug or Developer Tools to step through the SVG and
     * determine your label selector.
     */
    var labelSelector = '> g:eq(1) g text';

    /**
     * This is our data. For simplicity sake, doing inline and not AJAX.
     */
    var data = [
        ['Bahwan', 10],
        ['Go fleet', 20],
        ['Locator', 30],
        ['Samtech', 40],
        ['Tor Ai', 50]
    ];

    // Load Google Charts
    google.load('visualization', '1.1', { packages: ['corechart', 'line'] });

    // Callback when API is ready
    google.setOnLoadCallback(function () {

        /*
         * Setup the data table with your data.
         */
        var table = new google.visualization.DataTable({
            cols: [
                { id: 'name', label: 'Name', type: 'string' },
                { id: 'value', label: 'Value', type: 'number' }
            ]
        });

        // Add data to the table
        table.addRows(data);

        // Google Charts needs a raw element. I'm using jQuery to get the chart
        // Container, then indexing into it to get the raw element.
        var chartContainer = $(chartSelector)[0];

        // Create the Google Pie Chart
        var chart = new google.visualization.PieChart(chartContainer);

        // Draw the chart.
        chart.draw(table, { title: 'Classifications' });

        /*
         * This is the meat and potatoes of the operation. We really require
         * two things: #1) A selector that will get us a list of labels in the
         * legend, and #2) The DataTable powering the chart.  We'll cycle
         * through the labels, and use their index to lookup their value.
         * If you have some higher-level math you need to do to display a
         * different value, you can just replace my logic to get the count
         * with your's.
         */

        // The <svg/> element rendered by Google Charts
        var svg = $('svg', chartContainer);

        /*
         * Step through all the labels in the legend.
         */
        $(labelSelector, svg).each(function (i, v) {

            /*
             * I'm retrieving the value of the second column in my data table,
             * which contains the number that I want to display. If your logic
             * is more complicated, change this line to calculate a new total.
             */
            var total = table.getValue(i, 1);

            // The new label text.
            var newLabel = $(this).text() + '(' + total + ')';

            // Update the label text.
            $(this).text(newLabel);
        });

    });

</script>
<!--	<script>
        const wrap = d3.select('#chart-wrap');
        let wrapWidth = parseInt(wrap.style('width'));
        let wrapHeight;
        const src = 'https://assets.codepen.io/1329727/data-demo.csv';
        const colorsArray = ['#5626C4', '#E60576', '#2CCCC3', '#FACD3D', '#FF5100', '#181818',];
        const formatPerc = d3.format(".0%");
        let width;
        let height;
        let pieRadius;
        let pie;
        let total;
        let arc;

        // Tooltip functions
        const tooltipMouseMove = (d) => {
            const xArc = arc.centroid(d)[0] + (width / 2);
            const yArc = arc.centroid(d)[1] + (height / 2);

            tooltipChart
                .html(() => {
                    return (
                        `<div class="chart-tooltip-wrap">
                    <p>Percentage: ${formatPerc(d.value / total)}</p>
                    <p>Value: ${d.value}</p>
                   </div>
                  `
                    );
                })
                .style('visibility', 'visible')
                .style('top', 0)
                .style('left', 0)
                .style("transform", `translate(${xArc + 80}px, ${yArc - 25}px)`);
        }

        const tooltipMouseOut = () => {
            tooltipChart
                .style('visibility', 'hidden')
        }

        // Pie
        if (wrapWidth <= 479) {
            width = 250;
            height = 250;
        } else {
            width = 300;
            height = 300;
        }

        pieRadius = Math.min(width / 2, height / 2);

        pie = d3.pie()
            .value((d) => { return d.value; });

        arc = d3.arc()
            .outerRadius(pieRadius)
            .innerRadius(0);

        // Animation function
        const animate = (f) => {
            f.innerRadius = 0;
            let interp = d3.interpolate({ startAngle: 0, endAngle: 0 }, f);

            return (t) => { return arc(interp(t)); }
        }

        // SVG
        const svg = wrap.append('svg')
            .attr('width', width)
            .attr('height', height);

        // SVG aria tags
        svg.append('title')
            .attr('id', 'chart-title')
            .html('Pie chart');

        svg.append('desc')
            .attr('id', 'chart-desc')
            .html('Displays arbitrary values for items.');

        svg.attr('aria-labelledby', 'chart-title chart-desc');

        tooltipChart = wrap.append('div')
            .attr('class', 'chart-tooltip')
            .style('visibility', 'hidden');

        const g = svg.append('g')
            .attr('width', width)
            .attr('height', height)
            .style('transform', `translate(${width / 2}px, ${height / 2}px)`);

        // Legend wrap
        const legend = wrap.append('div')
            .attr('class', 'legend');

        // Create chart
        async function createPie() {
            const data = await d3.csv(src);
            data.sort((a, b) => {
                return d3.descending(+a.value, +b.value);
            });
            total = d3.sum(data, (d) => { return d.value; });

            // Pie slices
            const slices = g.selectAll('.arc')
                .data(pie(data))
                .enter()
                .append('path')
                .attr('class', 'slices')
                .attr('fill', (d, i) => {
                    return colorsArray[i];
                })
                .attr('aria-label', d => {
                    return `Pie slice for ${d.data.name}`
                })
                .on('mouseover', (event, d) => {
                    const f = d;
                    tooltipMouseMove(f);
                })
                .on('mouseout', () => {
                    tooltipMouseOut();
                })
                .transition()
                .duration(1000)
                .delay(100)
                .attrTween('d', animate);

            // Text values in slices
            const text = g.selectAll('.text')
                .data(pie(data))
                .enter()
                .append('text')
                .attr('transform', (d) => { return `translate(${arc.centroid(d)})`; })
                .attr('class', 'text')
                .style('opacity', '0')
                .text((d, i) => { return formatPerc(d.value / total) })
                .transition()
                .duration(300)
                .delay(700)
                .style('opacity', '1');

            // Legend
            legend.selectAll('div')
                .data(data)
                .enter()
                .append('div')
                .attr('class', 'legend-group')
                .html((d, i) => {
                    return (`
                <div class="legend-box" style="background-color: ${colorsArray[i]};"></div>
                <p class="legend-label">${d.name}</p>
              `)
                });
        }
        createPie();

        const resize = () => {
            let wrapWidth = parseInt(wrap.style('width'));
            if (wrapWidth <= 479) {
                width = 250;
                height = 250;
            } else {
                width = 300;
                height = 300;
            }

            svg.attr('width', width)
                .attr('height', height);

            g.attr('width', width)
                .attr('height', height)
                .style('transform', `translate(${width / 2}px, ${height / 2}px)`);

            pieRadius = Math.min(width / 2, height / 2);

            arc = d3.arc()
                .outerRadius(pieRadius)
                .innerRadius(0);

            d3.selectAll('.slices')
                .attr('d', arc)
                .on('mouseover', (event, d) => {
                    const f = d;
                    tooltipMouseMove(f);
                })
                .on('mouseout', () => {
                    tooltipMouseOut();
                })

            d3.selectAll('.text')
                .attr('transform', (d) => { return `translate(${arc.centroid(d)})`; })
        }

        d3.select(window).on('resize', resize);
    </script>-->
<script src="script.js"></script>
<!--<script>
    // jQuery
    $(document).ready(function () {
        // alert();

        var today = new Date();
        var dd = String(today.getDate()).padStart(2, '0');
        var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
        var yyyy = today.getFullYear();

        today = yyyy + '-' + mm + '-' + dd;

        yestdd8 = dd - 15;
        yest = yyyy + '-' + mm + '-' + yestdd8;



        yestF = yest + "T00:00:00";
        todayF = today + "T00:00:00";

        console.log(yestF);
        console.log(todayF);

        $.ajax({
            type: "POST",
            url: "/Home/AjaxMethod",
            data: {
                StartDate: yestF,
                EndDate: todayF
            },
            dataType: "text",
            success: function (response) {

                //alert(response);
                if (response == null || response.length == 0) {
                    return;
                }
                graphData = JSON.parse(response);

                console.log("graphData", graphData);

                let filteredData = graphData.filter(item => {
                    return item.date >= yestF && item.date <= todayF;
                });

                console.log("filteredData", filteredData);

                let labels = filteredData.map(item => formatDate(item.date));
                let values = filteredData.map(item => item.pending);
                let values1 = filteredData.map(item => item.completed);

                if (chart) {
                    chart.destroy(); // Destroy previous instance before creating a new one
                }

                console.log("labels", labels);

                //updateChart(labels, values, values1);



                let ctx = document.getElementById('myChart4').getContext('2d');

                chart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        //labels: [today, yest, yest2, yest3, yest4, yest5, yest6, yest7, yest8],
                        datasets: [{
                            label: 'Completed',
                            backgroundColor: "#caf270",
                            //data: [12, 59, 5, 56, 58, 12, 59, 87, 45],
                            data: values,
                        }, {
                            label: 'Pending',
                            backgroundColor: "#45c490",
                            //data: [12, 59, 5, 56, 58, 12, 59, 85, 23],
                            data: values1,
                        }

                        ],
                    },
                    options: {
                        tooltips: {
                            displayColors: true,
                            callbacks: {
                                mode: 'x',
                            },
                        },
                        scales: {
                            xAxes: [{
                                stacked: true,
                                gridLines: {
                                    display: false,
                                }
                            }],
                            yAxes: [{
                                stacked: true,
                                ticks: {
                                    beginAtZero: true,
                                },
                                type: 'linear',
                            }]
                        },
                        responsive: true,
                        maintainAspectRatio: false,
                        legend: {
                            position: 'bottom'
                        },
                    }
                });






            }
        });

        let Selected_SOU = document.getElementById("SOUID").value;
        let Selected_PID = document.getElementById("PID").value;
        let Selected_GID = document.getElementById("GID").value;

        //first chart

        $.ajax({
            type: "POST",
            url: "/Home/AjaxSouData1",
            data: {
                StartDate: yestF,
                EndDate: todayF

            },
            dataType: "text",
            success: function (response) {
                if (response == null || response.length == 0) {
                    return;
                }
                graphData1 = JSON.parse(response);


                console.log("graphData1", graphData1);
                console.log("graphData1.labels", graphData1.labels);
                console.log("graphData1.data", graphData1.data);

                let filterdDataGP1 = graphData1.map(item => item.labels);
                let filterdDataGP2 = graphData1.map(item => item.data);
                //const filterdDataGP1 = graphData1.map(({ labels}) => ({ labels }));
                //const filterdDataGP2 = graphData1.map(({ data}) => ({ data }));

                console.log("filterdDataGP1", filterdDataGP1);
                console.log("filterdDataGP2", filterdDataGP2);


                const coursesData = {
                    labels: filterdDataGP1,
                    datasets: [{
                        data: filterdDataGP2
                        //,
                        //backgroundColor: ['#FF6384', '#36A2EB',
                        //	'#FFCE56', '#4CAF50', '#9C27B0'],
                    }],
                };

                //first chart
                const config = {
                    type: 'doughnut',
                    data: coursesData,
                    options: {
                        plugins: {
                            title: {
                                display: true,
                                //text: 'GeeksforGeeks Courses Distribution',
                            },
                        },
                    },
                };
                const ctx = document.getElementById(
                    'coursesDoughnutChart').getContext('2d');

                new Chart(ctx, config);
            }
        });

        //second chart

        $.ajax({
            type: "POST",
            url: "/Home/AjaxProjectData1",
            data: {
                StartDate: yestF,
                EndDate: todayF
            },
            dataType: "text",
            success: function (response) {
                if (response == null || response.length == 0) {
                    return;
                }
                graphData1 = JSON.parse(response);


                console.log("graphData1", graphData1);
                console.log("graphData1.labels", graphData1.labels);
                console.log("graphData1.data", graphData1.data);

                let filterdDataGP1 = graphData1.map(item => item.labels);
                let filterdDataGP2 = graphData1.map(item => item.data);
                //const filterdDataGP1 = graphData1.map(({ labels}) => ({ labels }));
                //const filterdDataGP2 = graphData1.map(({ data}) => ({ data }));

                console.log("filterdDataGP1", filterdDataGP1);
                console.log("filterdDataGP2", filterdDataGP2);


                const coursesData = {
                    labels: filterdDataGP1,
                    datasets: [{
                        data: filterdDataGP2
                        //,
                        //backgroundColor: ['#FF6384', '#36A2EB',
                        //	'#FFCE56', '#4CAF50', '#9C27B0'],
                    }],
                };

                //first chart
                const config = {
                    type: 'doughnut',
                    data: coursesData,
                    options: {
                        plugins: {
                            title: {
                                display: true,
                                //text: 'GeeksforGeeks Courses Distribution',
                            },
                        },
                    },
                };
                const ctx = document.getElementById(
                    'coursesDoughnutChart1').getContext('2d');

                new Chart(ctx, config);
            }
        });


        //third chart

        $.ajax({
            type: "POST",
            url: "/Home/AjaxGateData1",
            data: {
                StartDate: yestF,
                EndDate: todayF
            },
            dataType: "text",
            success: function (response) {
                if (response == null || response.length == 0) {
                    return;
                }
                graphData1 = JSON.parse(response);


                console.log("graphData1", graphData1);
                console.log("graphData1.labels", graphData1.labels);
                console.log("graphData1.data", graphData1.data);

                let filterdDataGP1 = graphData1.map(item => item.labels);
                let filterdDataGP2 = graphData1.map(item => item.data);
                //const filterdDataGP1 = graphData1.map(({ labels}) => ({ labels }));
                //const filterdDataGP2 = graphData1.map(({ data}) => ({ data }));

                console.log("filterdDataGP1", filterdDataGP1);
                console.log("filterdDataGP2", filterdDataGP2);


                const coursesData = {
                    labels: filterdDataGP1,
                    datasets: [{
                        data: filterdDataGP2
                        //,
                        //backgroundColor: ['#FF6384', '#36A2EB',
                        //	'#FFCE56', '#4CAF50', '#9C27B0'],
                    }],
                };

                //first chart
                const config = {
                    type: 'doughnut',
                    data: coursesData,
                    options: {
                        plugins: {
                            title: {
                                display: true,
                                //text: 'GeeksforGeeks Courses Distribution',
                            },
                        },
                    },
                };
                const ctx = document.getElementById(
                    'coursesDoughnutChart2').getContext('2d');

                new Chart(ctx, config);
            }
        });



    });


    

    let graphData = [];

    function formatDate(date) {
        var d = new Date(date),
            month = '' + (d.getMonth() + 1),
            day = '' + d.getDate(),
            year = d.getFullYear();

        if (month.length < 2)
            month = '0' + month;
        if (day.length < 2)
            day = '0' + day;

        return [year, month, day].join('-');
    }

    function populateDates() {
        let startDate = new Date(document.getElementById("StartDate").value);
        let endDate = new Date(document.getElementById("EndDate").value);

        while (startDate <= endDate) {
            graphData.push({
                date: new Date(startDate),
                pending: 0,
                completed: 0
            });
            startDate.setDate(startDate.getDate() + 1);
        }
    }



    // Static Data Source (Simulating API Data)




    let chart; // To store chart instance
    function filterGraph(event) {
        event.preventDefault(); // no auto refresh.
        //populateDates();

        let startDate = document.getElementById("StartDate").value;
        let endDate = document.getElementById("EndDate").value;
        let Selected_SOU = document.getElementById("SOUID").value;
        let Selected_PID = document.getElementById("PID").value;
        let Selected_GID = document.getElementById("GID").value;
        // alert(Selected_SOU);

        // alert(startDate);
        //  alert(endDate);

        if (!startDate || !endDate) {
            alert("Please select both start and end dates.");
            return;
        }

        $.ajax({
            type: "POST",
            url: "/Home/AjaxMethod",
            data: {
                StartDate: startDate,
                EndDate: endDate
            },
            dataType: "text",
            success: function (response) {
                if (response == null || response.length == 0) {
                    return;
                }
                graphData = JSON.parse(response);

                //     result =JSON.parse( response);
                //    console.log("graphData",result);

                // result.forEach(item => {
                //              // Find the corresponding entry in graphData by matching the date
                //              let matchingData = graphData.find(data => data.date.toISOString().split('T')[0] === item.date.split('T')[0]);

                //              if (matchingData) {
                //                  // Update the pending and completed counts
                //                  matchingData.pending = item.pending;
                //                  matchingData.completed = item.completed;
                //              }
                //          });
                //  let labels = graphData.map(item => formatDate(item.date));
                // let values = graphData.map(item => item.pending);
                // let values1 = graphData.map(item => item.completed);
                let filteredData = graphData.filter(item => {
                    return item.date >= startDate && item.date <= endDate;
                });


                let labels = filteredData.map(item => formatDate(item.date));
                let values = filteredData.map(item => item.pending);
                let values1 = filteredData.map(item => item.completed);

                if (chart) {
                    chart.destroy(); // Destroy previous instance before creating a new one
                }
                updateChart(labels, values, values1);
            }
        });



        //first chart

        //first chart


        let coursesDoughnutChart = Chart.getChart('coursesDoughnutChart'); // Pass the canvas ID
        if (coursesDoughnutChart) {
            coursesDoughnutChart.destroy();
        }

        $.ajax({
            type: "POST",
            url: "/Home/AjaxSouData",
            data: {
                StartDate: startDate,
                EndDate: endDate
                , Selected_SOU: Selected_SOU

            },
            dataType: "text",
            success: function (response) {
                if (response == null || response.length == 0) {
                    return;
                }
                graphData1 = JSON.parse(response);


                console.log("graphData1", graphData1);
                console.log("graphData1.labels", graphData1.labels);
                console.log("graphData1.data", graphData1.data);

                let filterdDataGP1 = graphData1.map(item => item.labels);
                let filterdDataGP2 = graphData1.map(item => item.data);
                //const filterdDataGP1 = graphData1.map(({ labels}) => ({ labels }));
                //const filterdDataGP2 = graphData1.map(({ data}) => ({ data }));

                console.log("filterdDataGP1", filterdDataGP1);
                console.log("filterdDataGP2", filterdDataGP2);


                const coursesData = {
                    labels: filterdDataGP1,
                    datasets: [{
                        data: filterdDataGP2
                        //,
                        //backgroundColor: ['#FF6384', '#36A2EB',
                        //	'#FFCE56', '#4CAF50', '#9C27B0'],
                    }],
                };

                //first chart
                const config = {
                    type: 'doughnut',
                    data: coursesData,
                    options: {
                        plugins: {
                            title: {
                                display: true,
                                //text: 'GeeksforGeeks Courses Distribution',
                            },
                        },
                    },
                };

                const ctx = document.getElementById(
                    'coursesDoughnutChart').getContext('2d');

                new Chart(ctx, config);
            }
        });







        //second chart
        let coursesDoughnutChart1 = Chart.getChart('coursesDoughnutChart1'); // Pass the canvas ID

        if (coursesDoughnutChart1) {
            coursesDoughnutChart1.destroy();
        }
        $.ajax({
            type: "POST",
            url: "/Home/AjaxProjectData",
            data: {
                StartDate: startDate,
                EndDate: endDate
                , Selected_PID: Selected_PID
            },
            dataType: "text",
            success: function (response) {
                if (response == null || response.length == 0) {
                    return;
                }
                graphData1 = JSON.parse(response);


                console.log("graphData1", graphData1);
                console.log("graphData1.labels", graphData1.labels);
                console.log("graphData1.data", graphData1.data);

                let filterdDataGP1 = graphData1.map(item => item.labels);
                let filterdDataGP2 = graphData1.map(item => item.data);
                //const filterdDataGP1 = graphData1.map(({ labels}) => ({ labels }));
                //const filterdDataGP2 = graphData1.map(({ data}) => ({ data }));

                console.log("filterdDataGP1", filterdDataGP1);
                console.log("filterdDataGP2", filterdDataGP2);


                const coursesData = {
                    labels: filterdDataGP1,
                    datasets: [{
                        data: filterdDataGP2
                        //,
                        //backgroundColor: ['#FF6384', '#36A2EB',
                        //	'#FFCE56', '#4CAF50', '#9C27B0'],
                    }],
                };

                //first chart
                const config1 = {
                    type: 'doughnut',
                    data: coursesData,
                    options: {
                        plugins: {
                            title: {
                                display: true,
                                //text: 'GeeksforGeeks Courses Distribution',
                            },
                        },
                    },
                };


                const ctx1 = document.getElementById(
                    'coursesDoughnutChart1').getContext('2d');

                new Chart(ctx1, config1);
            }
        });


        //third chart
        let coursesDoughnutChart2 = Chart.getChart('coursesDoughnutChart2'); // Pass the canvas ID

        if (coursesDoughnutChart2) {
            coursesDoughnutChart2.destroy();
        }
        $.ajax({
            type: "POST",
            url: "/Home/AjaxGateData",
            data: {
                StartDate: startDate,
                EndDate: endDate
                , Selected_GID: Selected_GID

            },
            dataType: "text",
            success: function (response) {
                if (response == null || response.length == 0) {
                    return;
                }
                graphData1 = JSON.parse(response);


                console.log("graphData1", graphData1);
                console.log("graphData1.labels", graphData1.labels);
                console.log("graphData1.data", graphData1.data);

                let filterdDataGP1 = graphData1.map(item => item.labels);
                let filterdDataGP2 = graphData1.map(item => item.data);
                //const filterdDataGP1 = graphData1.map(({ labels}) => ({ labels }));
                //const filterdDataGP2 = graphData1.map(({ data}) => ({ data }));

                console.log("filterdDataGP1", filterdDataGP1);
                console.log("filterdDataGP2", filterdDataGP2);


                const coursesData = {
                    labels: filterdDataGP1,
                    datasets: [{
                        data: filterdDataGP2
                        //,
                        //backgroundColor: ['#FF6384', '#36A2EB',
                        //	'#FFCE56', '#4CAF50', '#9C27B0'],
                    }],
                };

                //first chart
                const config2 = {
                    type: 'doughnut',
                    data: coursesData,
                    options: {
                        plugins: {
                            title: {
                                display: true,
                                //text: 'GeeksforGeeks Courses Distribution',
                            },
                        },
                    },
                };
                const ctx2 = document.getElementById(
                    'coursesDoughnutChart2').getContext('2d');

                new Chart(ctx2, config2);
            }
        });




    }


    if (chart) {
        chart.destroy(); // Destroy previous instance before creating a new one
    }

    function updateChart(labels, values, values1) {
        //alert("Monika");
        let ctx = document.getElementById('myChart4').getContext('2d');

        chart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                //labels: [today, yest, yest2, yest3, yest4, yest5, yest6, yest7, yest8],
                datasets: [{
                    label: 'Completed',
                    backgroundColor: "#caf270",
                    //data: [12, 59, 5, 56, 58, 12, 59, 87, 45],
                    data: values,
                }, {
                    label: 'Pending',
                    backgroundColor: "#45c490",
                    //data: [12, 59, 5, 56, 58, 12, 59, 85, 23],
                    data: values1,
                }

                ],
            },
            options: {
                tooltips: {
                    displayColors: true,
                    callbacks: {
                        mode: 'x',
                    },
                },
                scales: {
                    xAxes: [{
                        stacked: true,
                        gridLines: {
                            display: false,
                        }
                    }],
                    yAxes: [{
                        stacked: true,
                        ticks: {
                            beginAtZero: true,
                        },
                        type: 'linear',
                    }]
                },
                responsive: true,
                maintainAspectRatio: false,
                legend: {
                    position: 'bottom'
                },
            }
        });


    }
    

</script>-->

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://code.jquery.com/jquery-3.4.1.js"></script>

<script type="text/javascript">

    $('.sidebar').toggleClass("show");


    $('.btn').click(function () {
        $(this).toggleClass("click");
        $('.sidebar').toggleClass("show");
    });
    $('.feat-btn').click(function () {
        $('nav ul .feat-show').toggleClass("show");
        $('nav ul .first').toggleClass("rotate");
    });
    $('.serv-btn').click(function () {
        $('nav ul .serv-show').toggleClass("show1");
        $('nav ul .second').toggleClass("rotate");
    });
    $('nav ul li').click(function () {
        $(this).addClass("active").siblings().removeClass("active");
    });
    $('nav ul li').load(function () {
        $(this).addClass("active").siblings().removeClass("active");
    });



    $(function () {
        $("select").each(function () {
            if ($(this).find("option").length <= 1) {
                $(this).attr("disabled", "disabled");
            }
        });

        $("select").change(function () {
            var value = 0;
            if ($(this).val() != "") {
                value = $(this).val();
            }
            var id = $(this).attr("id");
            // alert(id);
            $.ajax({
                type: "POST",
                url: "/Home/AjaxMethod_CascadingList",
                //data: '{type: "' + id + '", IDCast: ' + value + '}',
                //contentType: "application/json; charset=utf-8",
                //dataType: "json",
                data: { type: id, IDCast: value },
                dataType: "text",
                success: function (response) {
                    var dropDownId;
                    var list;


                    var Res = JSON.stringify(response);
                    // alert(response);
                    // alert(Res);

                    console.log(response);
                    console.log(Res);
                    var newJ = $.parseJSON(response);

                    var projectList = JSON.stringify(newJ.projectlist);

                    var Gatelist1 = JSON.stringify(newJ.gatelist);

                    switch (id) {
                        case "SOUID":
                            list = projectList;
                            DisableDropDown("#PID");
                            DisableDropDown("#GID");
                            PopulateDropDown("#PID", list);
                            break;
                        case "PID":
                            dropDownId = "#GID";
                            list = Gatelist1;
                            DisableDropDown("#GID");
                            PopulateDropDown("#GID", list);
                            break;
                    }

                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });
        });
    });

    function DisableDropDown(dropDownId) {
        $(dropDownId).attr("disabled", "disabled");
        $(dropDownId).empty().append('<option selected="selected" value="0">Please select</option>');
    }

    function PopulateDropDown(dropDownId, list) {
        //  alert(dropDownId);
        //  alert(list);

        var newJJ = $.parseJSON(list);
        //alert(newJJ);

        if (newJJ != null && newJJ.length > 0) {
            $(dropDownId).removeAttr("disabled");
            $(dropDownId).removeAttr("group");
            $(dropDownId).removeAttr("selected");


            $.each(newJJ, function () {
                // alert('m0nika');
                $(dropDownId).append($("<option></option>").val(this['value']).html(this['text']));


            });

        }
    }



    $(function () {
        if ($("#SOUID").val() != "" && $("#PID").val() != "" && $("#GID").val() != "") {
            var message = "SOU: " + $("#SOUID option:selected").text();
            message += "\nProject: " + $("#PID option:selected").text();
            message += "\nGate: " + $("#GID option:selected").text();
            // alert(message);
        }
    });
</script>

